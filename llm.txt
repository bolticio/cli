# Boltic CLI - Developer Documentation for AI Assistants

## Overview
The Boltic CLI is a Node.js command-line interface for managing Boltic Workflow integrations. It provides tools for creating, editing, syncing, publishing, and testing integrations to the Boltic platform.

**Package**: @boltic/cli
**Version**: 1.0.10
**Repository**: https://github.com/bolticio/cli
**License**: ISC

## Core Architecture

### Entry Point
- `index.js` - Main entry point and binary executable
- `cli.js` - Core CLI module with command routing and execution

### Command Structure
The CLI follows a modular command structure:

```
boltic [command] [subcommand] [options]
```

### Main Commands

#### Authentication Commands (`commands/login.js`)
- `boltic login` - Authenticate with Boltic platform using OAuth 2.0 flow
- `boltic logout` - Clear authentication tokens from secure storage

#### Integration Commands (`commands/integration.js`)
- `boltic integration create` - Create new integration with interactive wizard
- `boltic integration edit` - Edit existing integration
- `boltic integration sync` - Sync changes to draft version
- `boltic integration submit` - Submit integration for review
- `boltic integration publish` - Submit for review (deprecated, use submit)
- `boltic integration pull` - Pull latest changes from cloud
- `boltic integration status` - Show detailed integration information
- `boltic integration test` - Run Jest tests for integration
- `boltic integration help` - Show integration command help



#### General Commands
- `boltic help` - Display comprehensive help guide
- `boltic version` - Display CLI version
- `boltic --verbose [command]` - Enable verbose logging for any command

### API Layer (`api/`)
- `integration.js` - Integration management API calls (create, edit, sync, submit, pull, status)
- `login.js` - Authentication API calls and OAuth flow

### Helper Modules (`helper/`)
- `validation.js` - Schema validation for integrations with comprehensive rules
- `folder.js` - File system operations for integration folders
- `secure-storage.js` - Secure credential storage using keytar (OS keychain)
- `error.js` - Error handling and formatting
- `command-suggestions.js` - Command similarity suggestions for typos
- `verbose.js` - Verbose logging control

### Templates (`templates/`)
- `schemas.js` - Schema templates for integrations
- `component-schemas.js` - Component-specific schema templates

### Utilities (`utils/`)
- `integration.js` - Integration utility functions including SVG file selection

## Key Features

### Authentication
- **OAuth 2.0 Flow**: Browser-based authentication with automatic token exchange
- **Secure Storage**: Tokens stored in OS keychain (macOS Keychain, Windows Credential Manager, Linux Secret Service)
- **Session Management**: Automatic token refresh and session handling
- **Browser Integration**: Automatic browser launch for authentication

### Integration Management

#### Create Integration
Interactive creation wizard with comprehensive prompts:
- **Integration Name**: Letters and underscores only, max 50 characters
- **Icon Upload**: SVG file selection and cloud upload
- **Integration Types**:
  - Workflow Activity (customActivity)
  - Workflow Trigger (CloudTrigger)
  - Both types simultaneously
- **Descriptions**: Separate human and AI-generated descriptions for activities and triggers
- **Integration Groups**: Searchable selection from available groups
- **Authentication Forms**: Optional authentication form creation

#### Integration Operations
- **Edit**: Modify existing integrations with selection interface
- **Sync**: Upload changes to draft version with validation
- **Submit**: Submit integration for review with comprehensive validation
- **Pull**: Download latest changes from cloud with folder update
- **Status**: View detailed integration information including metadata
- **Test**: Run Jest tests within integration directory

#### Advanced Options
- **Path Specification**: Use `--path` flag to specify integration directory
- **Validation Control**: Use `--no-verify` flag to skip schema validation
- **Verbose Logging**: Use `--verbose` flag for detailed operation logs

### Validation System
Enhanced validation system (`helper/validation.js`):

#### Required Files
- `Documentation.mdx` - Integration documentation
- `spec.json` - Integration specification with proper format
- `schemas/authentication.json` - Authentication configuration
- `schemas/base.json` - Base schema configuration
- `schemas/resources/*.json` - Resource-specific schemas
- `schemas/webhook.json` - Webhook configuration (if trigger_type defined)

#### Validation Rules
- **Resource References**: All resource fields must reference existing resource files
- **Operation Validation**: Operations must have both `parameters` and `definition` properties
- **Trigger Validation**: trigger_type must be "CloudTrigger" or null
- **Schema Structure**: All option objects must include `label`, `value`, and `description`
- **File Integrity**: Proper JSON formatting and file existence checks



### File System Operations
- **Folder Structure Creation**: Automatic creation of integration directory structure
- **Schema Management**: JSON file parsing, validation, and updates
- **Icon Handling**: SVG file selection, validation, and cloud upload
- **Documentation Files**: MDX file management for authentication and general docs
- **Resource Management**: Dynamic resource file handling

### Testing Integration
- **Jest Integration**: Built-in support for running Jest tests
- **Test Discovery**: Automatic detection of `__tests__` directory
- **Path Support**: Run tests from any integration directory using `--path`
- **Verbose Output**: Detailed test results and error reporting

## Development Workflow

### Testing
- **Framework**: Jest with comprehensive test coverage
- **Coverage**: 96.45% statement coverage, 91.68% branch coverage
- **Test Files**: Located in `__tests__/` directory
- **Integration Tests**: Support for testing integrations with `boltic integration test`
- **Run Tests**: `npm test` (for CLI) or `boltic integration test` (for integrations)

### Code Quality
- **Linting**: ESLint with Prettier integration
- **Pre-commit**: Husky hooks with lint-staged
- **Standards**: ES6+ modules, async/await patterns
- **Type Safety**: Comprehensive input validation and error handling

### Dependencies
**Production**:
- `@inquirer/prompts` ^7.3.2 - Interactive CLI prompts with search functionality
- `axios` ^1.8.2 - HTTP client for API calls
- `chalk` ^5.3.0 - Terminal string styling and colors
- `keytar` ^7.9.0 - Secure credential storage in OS keychain
- `open` ^10.1.0 - Browser launching for OAuth flow
- `uuid` ^11.1.0 - Unique identifier generation
- `lodash.isempty` ^4.4.0 - Empty value checking
- `jest` ^29.7.0 - Testing framework

**Development**:
- `@babel/core` ^7.26.9 - Babel transpilation
- `@babel/preset-env` ^7.26.9 - Babel environment preset
- `eslint` ^9.21.0 - Code linting
- `prettier` ^3.5.3 - Code formatting
- `husky` ^9.1.7 - Git hooks
- `nodemon` ^3.1.9 - Development server
- `axios-mock-adapter` ^2.1.0 - API mocking for tests

## Common Patterns

### Error Handling
- **Centralized Handling**: Error processing in `helper/error.js`
- **Axios Interceptors**: Automatic HTTP error handling and formatting
- **User-friendly Messages**: Clear error messages with actionable suggestions
- **Graceful Degradation**: Fallback behaviors for failed operations

### Async Operations
- **Consistent Patterns**: async/await usage throughout
- **Promise Chains**: Proper error propagation in API calls
- **Timeout Handling**: Appropriate timeouts for network operations
- **Progress Indicators**: Visual feedback for long-running operations

### User Interaction
- **Interactive Prompts**: Rich prompts using @inquirer/prompts
- **Search Functionality**: Searchable selections for integrations and groups
- **Validation**: Real-time input validation with helpful messages
- **Color-coded Output**: Intuitive color coding using chalk
- **Progress Feedback**: Visual indicators for operations

### File Operations
- **Safe JSON Parsing**: Error handling for malformed JSON
- **Atomic Operations**: Safe file write operations
- **Directory Management**: Recursive directory creation and validation
- **Path Resolution**: Flexible path handling with validation

## Configuration

### Schema Templates
Integration schemas generated from templates in `templates/`:
- **Authentication**: API key-based authentication configuration
- **Base**: Core integration configuration and parameters
- **Webhook**: Trigger configuration for CloudTrigger integrations
- **Component Schemas**: Reusable component schema templates
- **Resource**: Resource-specific operations and parameters



## Security Considerations

### Credential Storage
- **OS Integration**: Native keychain integration via keytar
- **No Plaintext Storage**: All tokens encrypted in OS keychain
- **Automatic Cleanup**: Token removal on logout

### API Security
- **OAuth 2.0 Flow**: Industry-standard authentication
- **Bearer Token**: Secure API authentication
- **Token Refresh**: Automatic token lifecycle management

### Input Validation
- **Schema Validation**: Comprehensive validation for all integration files
- **File Type Validation**: SVG file validation for icons
- **Input Sanitization**: Proper sanitization for user inputs
- **Path Validation**: Security checks for file paths

## Troubleshooting

### Common Issues
1. **Authentication Errors**:
   - Check network connectivity
   - Clear and re-authenticate: `boltic logout && boltic login`

2. **Validation Errors**:
   - Use `--verbose` flag for detailed error information
   - Check schema format and required fields
   - Validate trigger_type values ("CloudTrigger" or null)

3. **File System Errors**:
   - Verify file permissions and paths
   - Check directory existence
   - Use `--path` flag to specify correct directory

4. **API Errors**:
   - Verify network connectivity
   - Use `--verbose` flag for detailed API logs

### Debug Mode
Enhanced debugging with `--verbose` flag:
```bash
boltic --verbose integration create
boltic --verbose integration sync
boltic --verbose login
```

### Command-specific Help
```bash
boltic help                    # General help
boltic integration help        # Integration commands help
```

## Contributing

### Code Style
- **Modern JavaScript**: ES6+ modules with import/export
- **Async Patterns**: Consistent async/await for asynchronous operations
- **Functional Approach**: Functional programming patterns where applicable
- **Error Handling**: Comprehensive error handling and user feedback

### Testing Requirements
- **Unit Tests**: Comprehensive unit tests for all features
- **Integration Tests**: End-to-end testing for API interactions
- **Mocking**: Proper mocking of external dependencies
- **Coverage**: Maintain 95%+ code coverage

### Documentation Standards
- **JSDoc**: Comments for complex functions
- **README Updates**: Keep documentation current with features
- **Schema Documentation**: Document integration schema formats
- **API Documentation**: Maintain API integration examples

## Integration Schema Format

### Spec.json Format
```json
{
  "id": "integration-uuid",
  "name": "Integration Name",
  "description": {
    "integration": "Activity description",
    "trigger": "Trigger description"
  },
  "icon": "https://cloud-url/icon.svg",
  "activity_type": "customActivity",
  "trigger_type": "CloudTrigger",
  "meta": {
    "ai_description": {
      "integration": "AI-friendly activity description",
      "trigger": "AI-friendly trigger description"
    }
  }
}
```

### Base Schema Structure
```json
{
  "parameters": [
    {
      "name": "resource",
      "meta": {
        "options": [
          {
            "value": "users",
            "label": "Users",
            "description": "Manage user resources"
          }
        ]
      }
    }
  ]
}
```

### Resource Schema Structure
```json
{
  "parameters": [
    {
      "name": "operation",
      "meta": {
        "options": [
          {
            "value": "users.list",
            "label": "List Users",
            "description": "Retrieve all users"
          }
        ]
      }
    }
  ],
  "list": {
    "parameters": [],
    "definition": {
      "response_schema": {},
      "request_schema": {}
    }
  }
}
```

### Authentication Schema
```json
{
  "parameters": [
    {
      "name": "api_key",
      "type": "string",
      "required": true,
      "label": "API Key",
      "description": "Your API key for authentication"
    }
  ]
}
```

This documentation provides a comprehensive guide for AI assistants working with the Boltic CLI codebase, covering current architecture, features, development practices, and troubleshooting procedures.